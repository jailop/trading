#include <gtest/gtest.h>
#include <cmath>
#include <indicators.h>

TEST(Indicators, MA) {
    MA ma(3);
    const double ts[] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    for (const double value : ts) {
        ma.update(value);
        if (value < 3.0) {
            EXPECT_TRUE(std::isnan(ma.get()));
        } else {
            EXPECT_EQ(ma.get(), value - 1.0);
        }
    }
}

TEST(Indicators, EMA) {
    size_t periods = 5;
    EMA ema(periods, 2.0);
    const double ts[] = {10.0, 12.0, 14.0, 13.0, 15.0, 16.0, 18.0};
    const double res[] = {12.8, 13.866666, 15.244444};
    for (int i = 0; i < 7; ++i) {
        double y = ema.update(ts[i]);
        if (i < periods - 1) {
            EXPECT_TRUE(std::isnan(y));
        } else {
            EXPECT_NEAR(y, res[i - periods + 1], 1e-6);
        }
    }
}

TEST(Indicators, RSI) {
    RSI rs(3);
    rs.update(1.0, 2.0);
    rs.update(2.0, 4.0);
    rs.update(4.0, 3.0);
    EXPECT_TRUE(abs(rs.get() - 75.0) < 1e-6);
}

TEST(Indicators, MACD) {
    // Data for this test was taken from:
    // https://investexcel.net/how-to-calculate-macd-in-excel/
    MACD macd(12, 26, 9);
    const double ts[] = {
        459.99, 448.85, 446.06, 450.81, 442.8, 448.97, 444.57, 441.4, 430.47, 420.05,
        431.14, 425.66, 430.58, 431.72, 437.87, 428.43, 428.35, 432.5, 443.66, 455.72,
        454.49, 452.08, 452.73, 461.91, 463.58, 461.14, 452.08, 442.66, 428.91, 429.79,
        431.99, 427.72, 423.2, 426.21, 426.98, 435.69, 434.33, 429.8, 419.85, 426.24,
        402.8, 392.05, 390.53, 398.67, 406.13, 405.46, 408.38, 417.2, 430.12, 442.78,
        439.29, 445.52, 449.98, 460.71, 458.66, 463.84, 456.77, 452.97, 454.74, 443.86,
        428.85, 434.58, 433.26, 442.93, 439.66, 441.35
    };
    const double res[] = {
        3.03752586873395, 1.90565222933578, 1.05870843537763, 0.410640325343509,
        -0.152012994298479, -0.790034731709356, -1.33810041258299, -2.17197457979186,
        -3.30783450954566, -4.59014109868629, -5.75668618055047, -6.65738137622787,
        -7.33974702300915, -7.78618154079804, -7.90287193112745, -7.58262468963905,
        -6.78603605354027, -5.77285851501159, -4.5644861655494, -3.21555428301682,
        -1.67071586469137, -0.112968660984149, 1.45411118991556, 2.82877971367526,
        3.94371200786538, 4.85665087093101, 5.41047306555065, 5.45836826902626,
        5.26562556819742, 4.89909832689482, 4.58597343224244, 4.26011131701701,
        3.96060129677866
    };
    for (int i = 0; i < 66; ++i) {
        double y = std::get<1>(macd.update(ts[i]));
        if (i <  33) {
            EXPECT_TRUE(std::isnan(y));
        } else {
            EXPECT_NEAR(y, res[i - 33], 1e-6);
        }
    }
}
